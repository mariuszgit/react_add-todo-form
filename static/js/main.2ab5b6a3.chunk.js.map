{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","getUser","userId","usersFromServer","find","completeTodos","getHeighestId","reduce","result","next","Math","max","App","useState","setTodos","setTitle","titleError","setTitleError","selectedUser","setSelectedUser","selectedUserError","setSelectedUserError","action","method","onSubmit","event","preventDefault","oldTodos","tasks","push","htmlFor","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ab5b6a3.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ninterface UserInfoProps {\n  user: User\n}\n\nexport const UserInfo = ({ user }: UserInfoProps) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype TodoInfoProps = {\n  todo: Todo\n};\n\nexport const TodoInfo = ({ todo }: TodoInfoProps) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', { 'TodoInfo--completed': todo.completed })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface TodoListProps {\n  todos: Todo[]\n}\n\nexport const TodoList = ({ todos }: TodoListProps) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { FormEvent, useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\n\nconst getUser = (userId: number) => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst completeTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.id),\n}));\n\nconst getHeighestId = (todos: Todo[]) => {\n  return todos.reduce((result, next) => Math.max(result, next.id), 0);\n};\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState(completeTodos);\n  const [title, setTitle] = useState('');\n  const [titleError, setTitleError] = useState(false);\n  const [selectedUser, setSelectedUser] = useState('0');\n  const [selectedUserError, setSelectedUserError] = useState(false);\n\n  function handleSubmit(event: FormEvent<HTMLFormElement>): void {\n    event.preventDefault();\n\n    if (title && (selectedUser !== '0')) {\n      setTodos(oldTodos => {\n        const tasks = [...oldTodos];\n\n        tasks.push({\n          id: getHeighestId(tasks) + 1,\n          title,\n          completed: false,\n          userId: +selectedUser,\n          user: getUser(+selectedUser),\n        });\n\n        setTitle('');\n        setSelectedUser('0');\n        setTitleError(false);\n        setSelectedUserError(false);\n\n        return tasks;\n      });\n    } else {\n      setTitleError(true);\n      setSelectedUserError(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"titleInput\">Title: </label>\n\n          <input\n            type=\"text\"\n            value={title}\n            data-cy=\"titleInput\"\n            id=\"titleInput\"\n            placeholder=\"Enter a title\"\n            onChange={(event) => {\n              setTitle(event.target.value);\n              setTitleError(false);\n            }}\n          />\n\n          {(!title && titleError)\n          && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"selectedUser\">User: </label>\n\n          <select\n            data-cy=\"userSelect\"\n            name=\"selectedUser\"\n            id=\"selectedUser\"\n            value={selectedUser}\n            onChange={(event) => {\n              setSelectedUser(event.target.value);\n              setSelectedUserError(false);\n            }}\n          >\n            <option value={0} disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {(selectedUser === '0' && selectedUserError)\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}